
// class to create a custom PID
class PID {
  private:
    double pkP;
    double pkI;
    double pkD;
    double pPrevInput;
    double pPrevTime;
    double pImax;
    double pItot;
    double pSetpoint;
  public:
    // default counstructor
    PID(){
      pkP = 0;
      pkI = 0;
      pkD = 0;
      pPrevInput = 0;
      pPrevTime = 0;
      pImax = 0;
      pItot = 0;
      pSetpoint = 0;
    }
    
    // Overloaded constructor
    PID(double P, double I, double D, double Dmax) {
      pkP = P;
      pkI = I;
      pkD = D;
      pPrevInput = 0;
      pPrevTime = 0;
      pImax = Dmax;
      pItot = 0;
      pSetpoint = 0;
    }
  
    // setters:
    void setP(double P){ pkP = P; }
    void setI(double I){ pkP = I; }
    void setD(double D){ pkD = D; }
    void setDmax(double Dmax) { pImax = Dmax; }
    void setSetpoint(double setpoint) { pSetpoint = setpoint; }
    
    // getters:
    double getP(){ return pkP; }
    double getI(){ return pkI; }
    double getD(){ return pkD; }
    double getDmax(){ return pImax; }
    void getSetpoint() { return pSetpoint; }

    double startOutput(double prevInput, double prevTime) {
      pPrevInput = prevInput;
      pPrevTime = prevTime;
    }

    double output(double curInput, double curTime){ 
      // Calculate the integral
      pItot = pItot + (curTime-pPrevTime)*curInput;

      // Check if I total is greater than the max:
      if(pItot > pImax) {
        pItot = pImax;
      } else if (pItot < -pImax) {
        pItot = -pImax;
      }
      
      // Evaluate P, i, and D terms:
      double P = pkP*(pSetpoint-curInput);
      double I = pkI*pItot;
      double D = pkD*(pPrevInput-curInput)/(pPrevTime-curTime);

      // reinitializes previous variables
      pPrevInput = curInput;
      pPrevTime = curTime;
      
      return (P + I + D);
    }
};


void setup() {
  // put your setup code here, to run once:
  PID* myPID = new PID();
  

}



void loop() {
  // put your main code here, to run repeatedly:

}